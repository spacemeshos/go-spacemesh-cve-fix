package types

import (
	"errors"

	"github.com/spacemeshos/go-scale"
)

const (
	MultipleATXs byte = iota + 1
	MultipleBallots
	HareEquivocation
	InvalidPostIndex
)

type Proof struct {
	// MultipleATXs | MultipleBallots | HareEquivocation | InvalidPostIndex
	Type uint8
	// AtxProof | BallotProof | HareProof | InvalidPostIndexProof
	Data scale.Type
}

func (e *Proof) EncodeScale(enc *scale.Encoder) (int, error) {
	var total int
	{
		// not compact, as scale spec uses "full" uint8 for enums
		n, err := scale.EncodeByte(enc, e.Type)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := e.Data.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (e *Proof) DecodeScale(dec *scale.Decoder) (int, error) {
	var total int
	{
		typ, n, err := scale.DecodeByte(dec)
		if err != nil {
			return total, err
		}
		e.Type = typ
		total += n
	}
	switch e.Type {
	case MultipleATXs:
		var proof AtxProof
		n, err := proof.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		e.Data = &proof
		total += n
	case MultipleBallots:
		var proof BallotProof
		n, err := proof.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		e.Data = &proof
		total += n
	case HareEquivocation:
		var proof HareProof
		n, err := proof.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		e.Data = &proof
		total += n
	case InvalidPostIndex:
		var proof InvalidPostIndexProof
		n, err := proof.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		e.Data = &proof
		total += n
	default:
		return total, errors.New("unknown malfeasance proof type")
	}
	return total, nil
}
